package com.zfsoft.cases.dbaccess.dao;

import com.zfsoft.cases.dbaccess.data.DbQlCase;
import com.zfsoft.cases.dbaccess.data.example.QlCaseExample;
import com.zfsoft.cases.dbaccess.data.vo.DbQlCaseVo;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import java.util.List;
import java.util.Map;

/**
 * (QlCaseMapper)表数据库访问层
 *
 * @author wangwg
 * @date  2020-10-22
 */
@Mapper
public interface QlCaseMapper {

    /**
     * 通过caseOid查询单条数据
     *
     * @param caseOid 业务主键
     * @return 实例对象
     */
    DbQlCase queryQlCaseByCaseOid(String caseOid);

    /**
     * 通过ID查询单条数据
     *
     * @param id 主键
     * @return 实例对象
     */
    DbQlCase queryById(Long id);

    /**
     * 查询指定行数据
     *
     * @param offset 查询起始位置
     * @param limit  查询条数
     * @return 对象列表
     */
    List<DbQlCase> queryAllByLimit(@Param("offset") int offset, @Param("limit") int limit);


    /**
     * 通过实体作为筛选条件查询
     *
     * @param dbQlCase 实例对象
     * @return 对象列表
     */
    List<DbQlCase> queryAll(DbQlCase dbQlCase);

    /**
     * 新增数据
     *
     * @param dbQlCase 实例对象
     * @return 影响行数
     */
    int insert(DbQlCase dbQlCase);

    /**
     * 批量新增数据（MyBatis原生foreach方法）
     *
     * @param entities List<dbQlCase> 实例对象列表
     * @return 影响行数
     */
    int insertBatch(@Param("entities") List<DbQlCase> entities);

    /**
     * 批量新增或按主键更新数据（MyBatis原生foreach方法）
     *
     * @param entities List<dbQlCase> 实例对象列表
     * @return 影响行数
     */
    int insertOrUpdateBatch(@Param("entities") List<DbQlCase> entities);

    /**
     * 修改数据
     *
     * @param dbQlCase 实例对象
     * @return 影响行数
     */
    int update(DbQlCase dbQlCase);

    /**
     * 通过主键删除数据
     *
     * @param id 主键
     * @return 影响行数
    queryQlCaseByCaseNumber     */
    int deleteById(Long id);

    /**
     * 通过caseNuber查询单条数据
     *
     * @param caseNumber 办件编号
     * @return 实例对象
     */
    DbQlCase queryQlCaseByCaseNumber(String caseNumber);

    /**
     * 查询办件列表
     *
     * @author wangwg
     * @date 2020/10/26
     * @param dbQlCase
     * @return java.util.List<com.zfsoft.dbaccess.data.DbQlCase>
     **/
    List<DbQlCase> selectQlCaseList(DbQlCase dbQlCase);

    /**
     * 查询已办办件列表
     *
     * @author wangwg
     * @date 2020/10/26
     * @param dbDoneCaseVo
     * @return java.util.List<com.zfsoft.dbaccess.data.DbQlCase>
     **/
    List<DbQlCase> selectDoneQlCaseList(DbQlCaseVo dbDoneCaseVo);

    /**
     * 查询容缺后补列表
     * @param dbDoneCaseVo
     * @return
     */
    List<DbQlCase> selectRqhbQlCaseList(DbQlCaseVo dbDoneCaseVo);

    /**
     * 根据条件查询办件申请列表（该方法关联申请人表，目前用于预审和手动办结）
     * dxl
     * @param dbDoneCaseVo
     * @return
     */
    List<DbQlCase> selectApplyQlCaseList(DbQlCaseVo dbDoneCaseVo);

    /**
     * 跨省通办系统中调用的接口
     * @param dbDoneCaseVo
//     * @param authUserOidList 用户的userOid，用于权限的过滤
     * @return
     */
    List<DbQlCase> selectKstbApplyQlCaseList(DbQlCaseVo dbDoneCaseVo);

    /**
     * 查询普通事项监督列表
     * @param dbDoneCaseVo
     * @return
     */
    List<DbQlCase> selectQlCaseSuperviseList(DbQlCaseVo dbDoneCaseVo);

    /**
     * 查询暂存列表
     * @param dbQlCaseVo
     * @return
     */
    List<DbQlCase>  selectTemporaryQlCaseList(DbQlCaseVo dbQlCaseVo);

    /**
     * 查询套餐办件下暂存列表
     * @param packageCaseOid
     * @return
     */
    List<DbQlCase> getQlCaseByPackageCaseOid(String packageCaseOid);


    /**
     * 查询暂存受理列表
     * @param dbDoneCaseVo
     * @return
     */
    List<DbQlCase> selectZcslQlCaseList(DbQlCaseVo dbDoneCaseVo);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_combo_case
     *
     * @mbggenerated
     */
    List<DbQlCase> selectByExample(QlCaseExample example);


    /**
     * 查询材料退件列表
     * @param dbDoneCaseVo
     * @return
     */
    List<DbQlCase> selectcltjQlCaseList(DbQlCaseVo dbDoneCaseVo);

    /**
     * 根据caseNum查询退件信息
     * @param
     * @return
     */
    DbQlCase getOneRetuenCaseByCaseNumber(DbQlCaseVo dbDoneCaseVo);

    /**
     * 根据一件事办件id和事项id查询办件信息
     * @param
     * @return
     */
    List<DbQlCase> getQlCaseByOid(String packageCaseOid, String serviceOid);

    /**
     * 查询出证办结的一件事办件
     * @param packageCaseOid
     * @return
     */
    List<DbQlCase> getFzOnthingCase(String packageCaseOid);

    /**
     * 根据条件查询办件数量
     * @param
     * @return
     */
    Integer countCase(Map map);

    /**
     * 根据授权事项查询所有的办件
     * @param list
     * @return
     */
    List<DbQlCase> taskYsCase(List<String> list);

    /**
     * 所有授权事项的待办
     * @param list
     * @return
     */
    List<DbQlCase> taskRqhbCaseList(List<String> list);

    /**
     * 根据证件号查询办件和申请人信息
     * @param map
     * @return
     */
    List<DbQlCase> queryCaseByZjh(Map map);


    //DbQlCase queryQlCaseInfo(@Param("queueNum") String queueNum,@Param("date") String date);

}
