package com.zfsoft.ha.dbaccess.dao;

import com.zfsoft.ha.dbaccess.data.DbHaWorkQueue;
import com.zfsoft.ha.dbaccess.data.example.DbHaWorkQueueExample;
import com.zfsoft.ha.dbaccess.data.vo.DbHaWorkQueueVo;
import com.zfsoft.ha.dbaccess.data.vo.DbHaWorkUserVo;
import com.zfsoft.ha.dbaccess.data.vo.DbWorkOrQueuVo;
import com.zfsoft.ha.dbaccess.data.vo.HaWorkQueueResponseVo;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import java.util.Date;
import java.util.List;

@Mapper
public interface DbHaWorkQueueMapper {
    /**
     * 根据队列ID查询帮办人员及队列相关信息
     * @param id
     * @return
     */
    DbWorkOrQueuVo queryWorkAndQueuByid(Long id);
    /**
     *  累计服务人数
     */
    Integer completeServiceNum(Date beginADay,Date endADay);
    /**
     *  正在服务中的人数
     */
    Integer inServiceNum(Date beginADay,Date endADay);
    /**
     *  获取等待服务的人数
     */
    Integer countWaitService(Date beginADay,Date endADay);

    /**
     * 获取排队人数及预计耗时接口 -万行
     * @param workUserID 员工id
     * @param startTime 开始时间
     * @param endTime 结束时间
     */
    HaWorkQueueResponseVo getWorkUser(String workUserID,Date startTime,Date endTime);
    /**
     * 办事人定时任务
     * @param startTime 开始时间
     * @param endTime 结束时间
     */
    List<DbHaWorkQueue> queryQueueList(Date startTime,Date endTime);

    /**
     * 统计总服务人数
     */
    int selectTotalServiceNum();

    /**
     * 是否有新的办事人员扫码
     */
    @Select({"select count(*) from t_ha_work_queue where  CREATE_DATE > FROM_UNIXTIME(UNIX_TIMESTAMP(CAST(SYSDATE()AS DATE)))"})
    int isHaveNewMesses();

    @Select({"select count(*) from t_ha_work_queue where  CREATE_DATE > #{latestTime} and SERVICE_WORK_USER_ID= #{serviceWorkUserId}"})
    int isHaveNewMessesLatestTime(Date latestTime, Long serviceWorkUserId);

    /**
     * 分配帮代办人员
     */
    int update(Long workUserId, Long queueId, String distributeStatus, Long distributeUserId, String updateBy, Date updateDate, String windowsNumbe);

    /**
     * 获取帮代办人员列表
     */
    List<HaWorkQueueResponseVo> getWorkUserList(@Param("name") String name, @Param("haType")String haType, @Param("groupId")Long groupId,@Param("start")Date start, @Param("end")Date end);

    /**
     * 获取帮代办人员列表
     */
    List<HaWorkQueueResponseVo> getAllUserListByGroupSplit(@Param("name") String name, @Param("haType")String haType, @Param("groupId")Long groupId,@Param("groupSplitId")Long groupSplitId,@Param("start")Date start, @Param("end")Date end);

    /**
     * 获取帮代办人员列表(模糊查询）
     */
    List<HaWorkQueueResponseVo> getWorkUserListByName(@Param("name") String name, @Param("haType")String haType, @Param("groupId")Long groupId);

    /**
     * 获取用户组列表
     */
    List<DbHaWorkUserVo> getWorkUserGroupList(Long id, Date start, Date end);

    /**
     * 查询快捷帮办及圆桌帮办等待人数
     *
     * @return
     */
    DbHaWorkQueueVo selectQueueNums(Date start, Date end);

    /**
     * 关联用户表查询
     *
     * @param name
     * @param cardNo
     * @param companyName
     * @param queueStatus
     * @param serviceStatus
     * @return
     */
    List<DbHaWorkQueueVo> selectByQueueAndUser(String name, String cardNo, String companyName, String queueStatus, String serviceStatus);

    /**
     *
     * @param name
     * @param cardNo
     * @param companyName
     * @param queueStatus
     * @param serviceStatus
     * @param serviceWorkUserId
     * @author zhaobf
     * @Date: 2022/8/5 9:30
     */
    List<DbHaWorkQueueVo> selectByQueueAndUserGroup(String name, String cardNo, String companyName, String queueStatus, String serviceStatus, Long serviceWorkUserId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    long countByExample(DbHaWorkQueueExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int deleteByExample(DbHaWorkQueueExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int insert(DbHaWorkQueue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int insertSelective(DbHaWorkQueue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    List<DbHaWorkQueue> selectByExample(DbHaWorkQueueExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    DbHaWorkQueue selectByPrimaryKey(Long id);

    DbHaWorkQueueVo selectVoByPrimaryKey(Long id);

    DbHaWorkQueueVo getServiceNum(Long userId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") DbHaWorkQueue record, @Param("example") DbHaWorkQueueExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int updateByExample(@Param("record") DbHaWorkQueue record, @Param("example") DbHaWorkQueueExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(DbHaWorkQueue record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_queue
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(DbHaWorkQueue record);

    /**
     * @param serviceWorkUserId 当前登录用户id
     * @param serviceStatus     服务状态
     * @param beginADay 当天开始时间
     * @param endADay 当天结束时间
     * @description: 根据当前登录用户及服务状态计数，只查询当日的数据
     */
    @Select({"select count(*) from t_ha_work_queue where SERVICE_WORK_USER_ID = #{serviceWorkUserId,jdbcType=INTEGER} and SERVICE_STATUS=#{serviceStatus,jdbcType=VARCHAR} and CREATE_DATE >= #{beginADay} and CREATE_DATE <= #{endADay}"})
    int countWorkQueueByServiceStatus(Long serviceWorkUserId, String serviceStatus, Date beginADay, Date endADay);

    @Select({"select count(*) from t_ha_work_queue where SERVICE_STATUS=#{serviceStatus,jdbcType=VARCHAR} and CREATE_DATE >= #{beginADay} and CREATE_DATE <= #{endADay}"})
    int countAllWorkQueueByServiceStatus( String serviceStatus, Date beginADay, Date endADay);

    /**
     * 线上-当前服务人数
     * @param serviceStatus
     * @param takeNumberType
     * @param serviceWorkUserId
     * @param beginADay
     * @param endADay
     * @return
     */
    @Select({"select count(*) from t_ha_work_queue where SERVICE_STATUS=#{serviceStatus,jdbcType=VARCHAR} and TAKE_NUMBER_TYPE=#{takeNumberType,jdbcType=VARCHAR} and SERVICE_WORK_USER_ID=#{serviceWorkUserId,jdbcType=INTEGER}  and CREATE_DATE >= #{beginADay} and CREATE_DATE <= #{endADay}"})
    int countCurrentServiceNumOnline( String serviceStatus,String takeNumberType,Long serviceWorkUserId, Date beginADay, Date endADay);

    /**
     * 线下-当前服务人数
     * @param serviceStatus
     * @param serviceWorkUserId
     * @param beginADay
     * @param endADay
     * @return
     */
    @Select({"select count(*) from t_ha_work_queue where SERVICE_STATUS=#{serviceStatus,jdbcType=VARCHAR} and SERVICE_WORK_USER_ID=#{serviceWorkUserId,jdbcType=INTEGER} and CREATE_DATE >= #{beginADay} and CREATE_DATE <= #{endADay}"})
    int countCurrentServiceNumOffline( String serviceStatus,Long serviceWorkUserId, Date beginADay, Date endADay);


    /**
     * @param serviceStatus 服务状态
     * @param beginADay     开始时间
     * @param endADay       结束时间
     * @param serviceWorkUserId 当前登录用户id
     * @description: 根据服务状态及今日完成服务时间计数
     */
    @Select({"select count(*) from t_ha_work_queue where SERVICE_WORK_USER_ID = #{serviceWorkUserId,jdbcType=INTEGER} and SERVICE_STATUS=#{serviceStatus,jdbcType=VARCHAR} and SERVICE_END_TIME >= #{beginADay} and SERVICE_END_TIME <= #{endADay}"})
    int countWorkQueueByServiceStatusAndEndTime(Long serviceWorkUserId, String serviceStatus, Date beginADay, Date endADay);

    /**
     * @param dbHaWorkQueueVo 办事队列vo
     * @description: 查询办事队列列表
     */
    List<DbHaWorkQueueVo> queryHaWokQueueByHaQueue(DbHaWorkQueueVo dbHaWorkQueueVo);

    /**
     * @param dbHaWorkQueueVo 办事队列vo
     * @description: 查询办事队列列表
     */
    List<DbHaWorkQueueVo> queueServiceList(DbHaWorkQueueVo dbHaWorkQueueVo);

    /**
     * 查询帮代办人员的待服务列表中，获取等待时间最长的一位进行服务
     *  @param serviceWorkUserId 帮办人员ID
     * @param serviceStatus     服务状态
     * @param beginADay 当天开始时间
     * @param endADay 当天结束时间
     */
    DbHaWorkQueueVo queryHaWorkQueueByServiceStatusAndWaitTime(Long serviceWorkUserId, String serviceStatus, Date beginADay, Date endADay);

    /**
     * @param workUserId 帮办人员ID
     * @param beginTime  开始时间
     * @description: 查询当前用户是否有队列创建时间大于上次查询的时间的记录
     * @return: int
     * @author: kangax
     * @date: 2022-07-26 15:13
     */
    @Select({"select count(*) from t_ha_work_queue where SERVICE_WORK_USER_ID= #{workUserId} and DETECTS_SERVICE_TIME >=#{beginTime} and SERVICE_STATUS= '1'"})
    int selectCountByBeginTime(Long workUserId, Date beginTime);

    /**
     * @description: 根据用户IDlist 服务状态 开始时间结束时间 计数
     * @param workUserIdList 用户IDlist
     * @param serviceStatus 服务状态
     * @param beginADay 当天开始时间
     * @param endADay 当天结束时间
     * @return: int
     * @author: kangax
     * @date: 2022-08-09 14:59
     */
    int countWorkQueueByServiceStatusAndWorkUserIds(List<Long> workUserIdList, String serviceStatus, Date beginADay, Date endADay);

    /**
     * @description: 根据用户IDlist 服务状态 开始时间结束时间 计数今日组内今日已经服务的人数
     * @param workUserIdList 用户IDlist
     * @param serviceStatus 服务状态
     * @param beginADay 当天开始时间
     * @param endADay 当天结束时间
     * @return: int
     * @author: kangax
     * @date: 2022-08-09 15:30
     */
    int countWorkQueueByServiceStatusAndEndTimeAndWorkUserIds(List<Long> workUserIdList, String serviceStatus, Date beginADay, Date endADay);

    /**
     * 根据当天时间和服务状态为2的时候时的结束服务时间为空的数据列表
     * @param startTime
     * @param endTime
     * @return
     */
    List<DbHaWorkQueue> queryQueueListByServiceStatus(Date startTime, Date endTime);
}
