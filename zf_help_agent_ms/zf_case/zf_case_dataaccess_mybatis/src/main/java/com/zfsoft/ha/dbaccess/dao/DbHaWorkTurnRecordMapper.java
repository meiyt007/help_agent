package com.zfsoft.ha.dbaccess.dao;

import com.zfsoft.cases.dbaccess.data.DbQlCaseApplay;
import com.zfsoft.ha.dbaccess.data.DbHaWorkTurnRecord;
import com.zfsoft.ha.dbaccess.data.example.DbHaWorkTurnRecordExample;

import java.util.Date;
import java.util.List;

import com.zfsoft.ha.dbaccess.data.vo.DbHaWorkQueueVo;
import com.zfsoft.ha.dbaccess.data.vo.DbHaWorkTurnRecordVo;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

@Mapper
public interface DbHaWorkTurnRecordMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    long countByExample(DbHaWorkTurnRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int deleteByExample(DbHaWorkTurnRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int insert(DbHaWorkTurnRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int insertSelective(DbHaWorkTurnRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    List<DbHaWorkTurnRecord> selectByExample(DbHaWorkTurnRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    DbHaWorkTurnRecord selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") DbHaWorkTurnRecord record, @Param("example") DbHaWorkTurnRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int updateByExample(@Param("record") DbHaWorkTurnRecord record, @Param("example") DbHaWorkTurnRecordExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(DbHaWorkTurnRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_work_turn_record
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(DbHaWorkTurnRecord record);

    /**
     * @param workUserId 帮办人员ID
     * @param beginTime  开始时间
     * @description: 查询当前用户是否有队列创建时间大于上次查询的时间的转派记录
     * @return: int
     * @author: zhaobf
     * @date: 2022-08-03 15:13
     */
    @Select({"select count(*) from t_ha_work_turn_record where TURN_STATUS='1' and SERVICE_WORK_USER_ID= #{workUserId} and CREATE_DATE >=#{beginTime} "})
    int selectCountByBeginTime(Long workUserId, Date beginTime) throws Exception;

    @Select({"select count(*) from t_ha_work_turn_record where TURN_STATUS='1' and VERIFY_WORK_USER_ID= #{verifyWorkUserId} and CREATE_DATE >=#{beginTime} "})
    int selectCountByVerifyIdAndBeginTime(Long verifyWorkUserId, Date beginTime) throws Exception;

    /**
     * @param workUserId 帮办人员ID
     * @param beginTime  开始时间
     * @description: 查询当前用户组是否有队列创建时间大于上次查询的时间的转派记录
     * @return: List<DbQlCaseApplay>
     * @author: zhaobf
     * @date: 2022-08-03 15:13
     */
    List<DbHaWorkTurnRecord> queryByBeginTime(Long workUserId, Date beginTime) throws Exception;

    /**
     * @param verifyWorkUserId  组长id
     * @param beginTime  开始时间
     * @description: 查询当前用户组是否有队列创建时间大于上次查询的时间的转派记录
     * @return: List<DbQlCaseApplay>
     * @author: zhaobf
     * @date: 2022-08-03 15:13
     */
    List<DbHaWorkTurnRecord> queryByVerifyWorkUserIdAndBeginTime(Long verifyWorkUserId, Date beginTime) throws Exception;

    /**
     * @description: 查询当天时间当前用户下 根据办事队列查询转派记录
     * @param workQueueId 办事队列
     * @param workUserId 当前帮代办人员ID
     * @param beginADay 当天的开始时间
     * @param endADay 当天的结束时间
     * @author: kangax
     * @date: 2022-08-09 21:30
     */
    List<DbHaWorkTurnRecord> queryByQueueIdAndWorkUserId(Long workQueueId, Long workUserId, Date beginADay, Date endADay);

    /**
     * @description: 查询当天时间当前用户下 根据办事队列查询转派记录
     * @param workQueueId 办事队列
     * @param verifyWorkUserId 当前帮代办人员ID
     * @param beginADay 当天的开始时间
     * @param endADay 当天的结束时间
     * @author: kangax
     * @date: 2022-08-09 21:30
     */
    List<DbHaWorkTurnRecord> queryByQueueIdAndVerifyWorkUserId(Long workQueueId, Long verifyWorkUserId, Date beginADay, Date endADay);

    /**
     * 根据办件id获取是否有转派id
     * @param workUserId
     * @return
     */
    List<DbHaWorkTurnRecordVo> queryWorkTurnRecord(Long workUserId,Long verifyWorkUserId, String name,String turnStatus );
    /**
     * 根据vo查询条件搜索转派记录
     * @param haWorkTurnRecordVo
     * @return
     */
    List<DbHaWorkTurnRecordVo> queryWorkService(DbHaWorkTurnRecordVo haWorkTurnRecordVo);

    /**
     * @description: 更新办事转派中服务结束时间
     * @param turnRecordIds 转派记录IDs
     * @param updateBy 修改人
     * @param nowDate 当前时间
     * @author: kangax
     * @date: 2022-08-09 23:27
     */
    int updateByIds(List<Long> turnRecordIds, String updateBy, Date nowDate, Integer duration);

    @Select({"select count(*) from t_ha_work_turn_record where HANDLE_WORK_USER_ID = #{userId} "})
    int getTurnCount(Long userId);
}