package com.zfsoft.ha.dbaccess.dao;

import com.zfsoft.ha.dbaccess.data.DbHaWorkUser;
import com.zfsoft.ha.dbaccess.data.example.DbHaWorkUserExample;
import com.zfsoft.ha.dbaccess.data.vo.DbHaWorkUserRegistrarVo;
import com.zfsoft.ha.dbaccess.data.vo.DbHaWorkUserVo;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Update;

import java.util.List;

@Mapper
public interface DbHaWorkUserMapper {
    /**
     * 获取每个帮办人员的排队情况
     *
     * @param groupId 分组信息
     * @param name    帮办人员姓名
     * @param status  帮办人员状态
     */
    List<DbHaWorkUser> queryHelpPersonList(Long groupId, String name, String status);

    /**
     * 获取员工总数
     */
    Integer countServicenum();
    /***
     * 获取所有员工总时长
     */
    Integer avgServiceTime();
    /**
     * 查询状态为除了1.离线，服务人数最小的帮办人员集合,扫码填写帮代办信息接口
     */
    List<DbHaWorkUser> getMinMaxServiceNumSM(String groupId,String haType);

    /**
     * 查询状态为除了1.离线，服务人数最小的帮办人员集合
     */
    List<DbHaWorkUser> getMinMaxServiceNum();

    /**
     * 根据用户类型查询状态为除了1.离线，服务人数最小的帮办人员集合
     */
    List<DbHaWorkUser> getMinMaxServiceNumByHaType(String haType);

    List<DbHaWorkUserVo> queryNameAndGroup(String workUserName, Long groupId);

    /**
     * 根据账号查询用户信息
     * @param account 账号 or phone 手机号
     * @return 实例对象
     */
    DbHaWorkUserVo queryloginByAccountAndId(String account, Long workUserId);

    /**
     * 通过ID查询单条数据
     *
     * @param id 主键
     * @return 实例对象
     */
    DbHaWorkUser queryById(Long id);

    /**
     * 修改数据
     *
     * @param thaWorkUser 实例对象
     * @return 影响行数
     */
    int update(DbHaWorkUser thaWorkUser);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_help_work_user
     *
     * @mbg.generated
     */
    long countByExample(DbHaWorkUserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_help_work_user
     *
     * @mbg.generated
     */
    int deleteByExample(DbHaWorkUserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_help_work_user
     *
     * @mbg.generated
     */
    int insert(DbHaWorkUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_help_work_user
     *
     * @mbg.generated
     */
    int insertSelective(DbHaWorkUser record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_help_work_user
     *
     * @mbg.generated
     */
    List<DbHaWorkUser> selectByExample(DbHaWorkUserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_help_work_user
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") DbHaWorkUser record, @Param("example") DbHaWorkUserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_ha_help_work_user
     *
     * @mbg.generated
     */
    int updateByExample(@Param("record") DbHaWorkUser record, @Param("example") DbHaWorkUserExample example);

    /**
     * 根据ID给当前帮代办人员的正在服务次数+1
     *
     * @param serviceWorkUserId
     * @return
     */
    @Update({"UPDATE t_ha_help_work_user SET CURRENT_SERVICE_NUM=CURRENT_SERVICE_NUM +1 WHERE ID=#{serviceWorkUserId}"})
    int updateCurrentServiceNumPlusOneById(Long serviceWorkUserId);

    /**
     * 根据ID给当前帮代办人员的正在服务次数-1
     *
     * @param serviceWorkUserId
     * @return
     */
    @Update({"UPDATE t_ha_help_work_user SET CURRENT_SERVICE_NUM=CURRENT_SERVICE_NUM -1 WHERE ID=#{serviceWorkUserId}"})
    int updateCurrentServiceNumReduceOneById(Long serviceWorkUserId);

    /**
     * 修改用户登录位置
     * @param Id
     * @param loginLocationName 登录位置
     * @return
     */
    @Update({"UPDATE t_ha_help_work_user SET LOGIN_LOCATION_NAME = #{loginLocationName}  WHERE ID=#{id}"})
    int updateUserLoginLocationName(Long id, String loginLocationName);

    /**
     * 查询所有的帮代办人员
     *
     * @param groupName 分组名
     * @param postName  分组职务
     * @param workUserName   帮代办人员姓名
     * @return 帮代办人员List集合
     * @author yupeng
     * @date 2022年08月01 16:24:57
     */
    List<DbHaWorkUserRegistrarVo> queryAllHelpWorkUserList(String groupName, String postName, String workUserName);

    /**
     * @description: 根据用户组编号查询用户信息list
     * @param   groupId 用户组编号
     * @param deleteStatusNo 删除状态为1
     * @return:  List<DbHaWorkUser>  返回用户组list信息
     * @author: kangax
     * @date: 2022-08-09 14:23
     */
    List<DbHaWorkUser> selectByGroupId(Long groupId, String deleteStatusNo,String apponStatus);

    List<DbHaWorkUser> selectByGroupIdAndPost(Long groupId, String deleteStatusNo,String apponStatus,String groupPost);

    List<DbHaWorkUser> selectByHaType(String haType, String deleteStatusNo);

    /**
     * 根据组编号和用户类型，分组职务获取用户列表
     * @param groupId  组编号
     * @param userType  用户类型
     * @param groupPost  分组职务
     * @return
     */
    List<DbHaWorkUser> selectByGroupIdAndType(Long groupId, String userType, String groupPost);
}
