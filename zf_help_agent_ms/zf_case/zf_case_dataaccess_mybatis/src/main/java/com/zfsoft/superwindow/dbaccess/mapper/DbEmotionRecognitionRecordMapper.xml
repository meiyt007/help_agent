<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zfsoft.superwindow.dbaccess.dao.DbEmotionRecognitionRecordMapper">

    <resultMap type="com.zfsoft.superwindow.dbaccess.data.DbEmotionRecognitionRecord" id="EmotionRecognitionRecordMap">
        <result property="id" column="ID" jdbcType="INTEGER"/>
        <result property="code" column="CODE" jdbcType="VARCHAR"/>
        <result property="photoNum" column="PHOTO_NUM" jdbcType="INTEGER"/>
        <result property="emotion" column="EMOTION" jdbcType="VARCHAR"/>
        <result property="emotionDegree" column="EMOTION_DEGREE" jdbcType="VARCHAR"/>
        <result property="emotionTop" column="EMOTION_TOP" jdbcType="VARCHAR"/>
        <result property="emotionRight" column="EMOTION_RIGHT" jdbcType="VARCHAR"/>
        <result property="emotionBottom" column="EMOTION_BOTTOM" jdbcType="VARCHAR"/>
        <result property="emotionLeft" column="EMOTION_LEFT" jdbcType="VARCHAR"/>
        <result property="createDate" column="CREATE_DATE" jdbcType="TIMESTAMP"/>
        <result property="createUser" column="CREATE_USER" jdbcType="VARCHAR"/>
        <result property="score" column="SCORE" jdbcType="VARCHAR"/>
        <result property="virtualBusinessOid" column="VIRTUAL_BUSINESS_OID" jdbcType="VARCHAR"/>
        <result property="location" column="LOCATION" jdbcType="VARCHAR"/>
        <result property="picAddress" column="PIC_ADDRESS" jdbcType="VARCHAR"/>
        <result property="types" column="TYPES" jdbcType="INTEGER"/>
        <result property="caseOid" column="CASE_OID" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="EmotionRecognitionRecordMap">
        select ID,
               CODE,
               PHOTO_NUM,
               EMOTION,
               EMOTION_DEGREE,
               EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM, EMOTION_LEFT, CREATE_DATE, CREATE_USER, SCORE, VIRTUAL_BUSINESS_OID,LOCATION,PIC_ADDRESS,TYPES
        from emotion_recognition_record
        where ID = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="EmotionRecognitionRecordMap">
        select ID,
               CODE,
               PHOTO_NUM,
               EMOTION,
               EMOTION_DEGREE,
               EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM, EMOTION_LEFT, CREATE_DATE, CREATE_USER
        from emotion_recognition_record
            limit #{offset}, #{limit}
    </select>

    <select id="queryEmotionRecognitionList" resultMap="EmotionRecognitionRecordMap">
        select ID,
               CODE,
               PHOTO_NUM,
               EMOTION,
               EMOTION_DEGREE,
               EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM, EMOTION_LEFT, CREATE_DATE, CREATE_USER
        from emotion_recognition_record where CODE = #{code}
    </select>

    <select id="queryEmotionRecognitionListByVirtualBusinessOidAndCaseId" resultMap="EmotionRecognitionRecordMap">
        select ID,
               CODE,
               PHOTO_NUM,
               EMOTION,
               EMOTION_DEGREE,
               EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM, EMOTION_LEFT, CREATE_DATE, CREATE_USER,SCORE,VIRTUAL_BUSINESS_OID,LOCATION,PIC_ADDRESS,TYPES
        from emotion_recognition_record where VIRTUAL_BUSINESS_OID = #{virtualBusinessOid}  and  CASE_OID = #{caseOid}
    </select>

    <select id="queryEmotionRecognitionListByVirtualBusinessOidAndCaseOidIsNull" resultMap="EmotionRecognitionRecordMap">
        select ID,
               CODE,
               PHOTO_NUM,
               EMOTION,
               EMOTION_DEGREE,
               EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM, EMOTION_LEFT, CREATE_DATE, CREATE_USER,SCORE,VIRTUAL_BUSINESS_OID,LOCATION,PIC_ADDRESS,TYPES,CASE_OID
        from emotion_recognition_record where VIRTUAL_BUSINESS_OID = #{virtualBusinessOid}  and  (CASE_OID is null or CASE_OID = '' )
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="EmotionRecognitionRecordMap">
        select
        ID, CODE, PHOTO_NUM, EMOTION, EMOTION_DEGREE, EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM, EMOTION_LEFT,
               CREATE_DATE, CREATE_USER, SCORE, VIRTUAL_BUSINESS_OID,LOCATION,PIC_ADDRESS,TYPES,CASE_OID
        from emotion_recognition_record
        <where>
            <if test="id != null">
                and ID = #{id}
            </if>
            <if test="code != null and code != ''">
                and CODE = #{code}
            </if>
            <if test="photoNum != null">
                and PHOTO_NUM = #{photoNum}
            </if>
            <if test="emotion != null and emotion != ''">
                and EMOTION = #{emotion}
            </if>
            <if test="emotionDegree != null">
                and EMOTION_DEGREE = #{emotionDegree}
            </if>
            <if test="emotionTop != null and emotionTop != ''">
                and EMOTION_TOP = #{emotionTop}
            </if>
            <if test="emotionRight != null and emotionRight != ''">
                and EMOTION_RIGHT = #{emotionRight}
            </if>
            <if test="emotionBottom != null and emotionBottom != ''">
                and EMOTION_BOTTOM = #{emotionBottom}
            </if>
            <if test="emotionLeft != null and emotionLeft != ''">
                and EMOTION_LEFT = #{emotionLeft}
            </if>
            <if test="createDate != null">
                and CREATE_DATE = #{createDate}
            </if>
            <if test="createUser != null and createUser != ''">
                and CREATE_USER = #{createUser}
            </if>
            <if test="virtualBusinessOid != null and virtualBusinessOid != ''">
                and VIRTUAL_BUSINESS_OID = #{virtualBusinessOid}
            </if>
            <if test="score != null and score != ''">
                and SCORE = #{score}
            </if>
            <if test="caseOid != null and caseOid != ''">
                and CASE_OID = #{caseOid}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into emotion_recognition_record(CODE, PHOTO_NUM, EMOTION, EMOTION_DEGREE, EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM,
                                                                   EMOTION_LEFT, CREATE_DATE, CREATE_USER,SCORE,VIRTUAL_BUSINESS_OID,LOCATION,PIC_ADDRESS,TYPES,CASE_OID)
        values (#{code}, #{photoNum}, #{emotion}, #{emotionDegree}, #{emotionTop}, #{emotionRight}, #{emotionBottom}, #{emotionLeft}, #{createDate}, #{createUser},
         #{score}, #{virtualBusinessOid},#{location},#{picAddress},#{types},#{caseOid})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into emotion_recognition_record(CODE, PHOTO_NUM, EMOTION, EMOTION_DEGREE, EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM,
        EMOTION_LEFT, CREATE_DATE, CREATE_USER)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.code}, #{entity.photoNum}, #{entity.emotion}, #{entity.emotionDegree}, #{entity.emotionTop}, #{entity.emotionRight},
            #{entity.emotionBottom}, #{entity.emotionLeft}, #{entity.createDate}, #{entity.createUser})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into emotion_recognition_record(CODE, PHOTO_NUM, EMOTION, EMOTION_DEGREE, EMOTION_TOP, EMOTION_RIGHT, EMOTION_BOTTOM,
        EMOTION_LEFT, CREATE_DATE, CREATE_USER)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.code}, #{entity.photoNum}, #{entity.emotion}, #{entity.emotionDegree}, #{entity.emotionTop}, #{entity.emotionRight},
            #{entity.emotionBottom}, #{entity.emotionLeft}, #{entity.createDate}, #{entity.createUser})
        </foreach>
        on duplicate key update
        CODE = values(CODE) , PHOTO_NUM = values(PHOTO_NUM) , EMOTION = values(EMOTION) , EMOTION_DEGREE = values(EMOTION_DEGREE) , EMOTION_TOP
        = values(EMOTION_TOP) , EMOTION_RIGHT = values(EMOTION_RIGHT) , EMOTION_BOTTOM = values(EMOTION_BOTTOM) , EMOTION_LEFT = values(EMOTION_LEFT) , CREATE_DATE =
        values(CREATE_DATE) , CREATE_USER = values(CREATE_USER)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update emotion_recognition_record
        <set>
            <if test="code != null and code != ''">
                CODE = #{code},
            </if>
            <if test="photoNum != null">
                PHOTO_NUM = #{photoNum},
            </if>
            <if test="emotion != null and emotion != ''">
                EMOTION = #{emotion},
            </if>
            <if test="emotionDegree != null">
                EMOTION_DEGREE = #{emotionDegree},
            </if>
            <if test="emotionTop != null and emotionTop != ''">
                EMOTION_TOP = #{emotionTop},
            </if>
            <if test="emotionRight != null and emotionRight != ''">
                EMOTION_RIGHT = #{emotionRight},
            </if>
            <if test="emotionBottom != null and emotionBottom != ''">
                EMOTION_BOTTOM = #{emotionBottom},
            </if>
            <if test="emotionLeft != null and emotionLeft != ''">
                EMOTION_LEFT = #{emotionLeft},
            </if>
            <if test="createDate != null">
                CREATE_DATE = #{createDate},
            </if>
            <if test="createUser != null and createUser != ''">
                CREATE_USER = #{createUser},
            </if>
            <if test="caseOid != null and caseOid != ''">
                CASE_OID = #{caseOid},
            </if>
        </set>
        where ID = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from emotion_recognition_record
        where ID = #{id}
    </delete>

</mapper>

